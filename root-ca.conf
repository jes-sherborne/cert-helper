# OpenSSL root CA configuration file.

[ req ]
# Options for the `req` tool (`man req`).
# We only use this once, when we create the CSR for the root CA to self-sign
default_bits            = 4096
utf8                    = yes                   # Input is UTF-8
string_mask             = utf8only              # Emit UTF-8 strings
prompt                  = no                    # Don't prompt for DN. Just get it from this file
distinguished_name      = root_ca_dn            # DN section
req_extensions          = root_ca_req_ext       # Desired extensions
default_md              = sha256                # sha1 is more common but deprecated

[ root_ca_dn ]
organizationName        = "____orgName____"
organizationalUnitName  = "____orgName____ Root CA"
commonName              = "____orgName____ Root CA"

[ root_ca_req_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash

# The remainder of the file deals with use as a CA

[ ca ]
default_ca = root_ca

[ root_ca ]
dir                     = ____dir____
private_key             = $dir/private/root-ca.key.pem
certificate             = $dir/certs/root-ca.cert.pem
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
database                = $dir/db/index.txt
serial                  = $dir/db/serial
RANDFILE                = $dir/private/.rand
crlnumber               = $dir/db/crlnumber
crl                     = $dir/crl/root-ca.crl.pem
crl_extensions          = crl_ext
default_crl_days        = 30
default_md              = sha256
name_opt                = ca_default
cert_opt                = ca_default
preserve                = no
policy                  = policy_strict
unique_subject          = no
default_days            = 3652                  # How long to certify for
email_in_dn             = no                    # Put email in extension, per spec recommendation
copy_extensions         = none                  # Don't copy extensions from CSR
x509_extensions         = signing_ca_ext        # Default cert extensions
crl_extensions          = crl_ext               # CRL extensions

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = supplied
commonName              = supplied
emailAddress            = optional

# Certificate extensions define what types of certificates the CA can create.

[ root_ca_ext ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ signing_ca_ext ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ crl_ext ]
authorityKeyIdentifier=keyid:always
