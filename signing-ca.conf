# OpenSSL signing CA configuration file.

[ req ]
# Options for the `req` tool (`man req`).
# We only use this once, when we create the CSR for the root CA to sign
default_bits            = 4096
utf8                    = yes                   # Input is UTF-8
string_mask             = utf8only              # Emit UTF-8 strings
prompt                  = no                    # Don't prompt for DN. Just get it from this file
distinguished_name      = signing_ca_dn         # DN section
req_extensions          = signing_ca_req_ext    # Desired extensions
default_md              = sha256                # sha1 is more common but deprecated

[ signing_ca_dn ]
organizationName        = "____orgName____"
organizationalUnitName  = "____orgName____ Signing CA"
commonName              = "____orgName____ Signing CA ____caName____"

[ signing_ca_req_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true,pathlen:0
subjectKeyIdentifier    = hash

# The remainder of the file deals with use as a CA

[ ca ]
default_ca = signing_ca

[ signing_ca ]
dir                     = ____dir____
private_key             = $dir/private/ca.key.pem
certificate             = $dir/certs/ca.cert.pem
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
database                = $dir/db/index.txt
serial                  = $dir/db/serial
RANDFILE                = $dir/private/.rand
crlnumber               = $dir/db/crlnumber
crl                     = $dir/crl/ca.crl.pem
crl_extensions          = crl_ext
default_crl_days        = 30
default_md              = sha256
name_opt                = ca_default
cert_opt                = ca_default
preserve                = no
policy                  = policy_client
unique_subject          = no
default_days            = 730                   # How long to certify for
email_in_dn             = no                    # Put email in extension, per spec recommendation
copy_extensions         = copy                  # Copy extensions from CSR
x509_extensions         = signing_ca_ext        # Default cert extensions
crl_extensions          = crl_ext               # CRL extensions

# Policies determine the requirements to sign a certificate.

[ policy_client ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = supplied
commonName              = supplied
emailAddress            = supplied

[ policy_server ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = supplied
commonName              = supplied
emailAddress            = optional

# Certificate extensions define what types of certificates the CA can create.

[ client_ext ]
keyUsage                = critical,digitalSignature,keyEncipherment
basicConstraints        = CA:false
extendedKeyUsage        = clientAuth
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always

[ email_ext ]
keyUsage                = critical,digitalSignature,keyEncipherment
basicConstraints        = CA:false
extendedKeyUsage        = emailProtection,clientAuth
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always

[ server_ext ]
keyUsage                = critical,digitalSignature,keyEncipherment
basicConstraints        = CA:false
extendedKeyUsage        = serverAuth,clientAuth
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always

[ crl_ext ]
authorityKeyIdentifier=keyid:always
